# Backend Update Log for Frontend Integration

This file is continuously updated with all backend changes, new endpoints, response shapes, and integration notes for the frontend team.

---

## [2025-10-23] Volunteer Features & Analytics

### 1. Volunteer: Choose NGO
- **Endpoint:** PATCH /api/volunteers/:id/ngo
- **Body:** { "ngoId": "<NGO_ID>" }
- **Description:** Allows a volunteer to select/set their NGO. Updates the `ngo` field on the volunteer's user record.
- **Example Request:**
```json
PATCH /api/volunteers/6521.../ngo
{
  "ngoId": "6512..."
}
```
- **Example Response:**
```json
{ "message": "NGO set for volunteer", "ngo": "6512..." }
```

### 2. Volunteer: Get All Scans
- **Endpoint:** GET /api/volunteers/:id/scans
- **Description:** Returns all AidLog (scan) records performed by the volunteer, including event info.
- **Example Response:**
```json
[
  {
    "id": "6531...",
    "event": { "id": "6512...", "name": "Food Drive", "location": "Kakuma" },
    "did": "did:example:abc123",
    "status": "collected",
    "timestamp": "2025-10-23T10:00:00.000Z",
    "hederaTx": { "transactionId": "0.0.123@163", "status": "SUCCESS" }
  }
]
```

### 3. Volunteer: Assigned Events (with date/status filter)
- **Endpoint:** GET /api/volunteers/:id/events?date=YYYY-MM-DD&status=upcoming|completed
- **Description:** Returns events assigned to the volunteer, filtered by date or status (upcoming/completed).
- **Example Response:**
```json
[
  {
    "id": "6512...",
    "name": "Food Drive",
    "location": "Kakuma",
    "startTime": "2025-10-23T09:00:00.000Z",
    "endTime": "2025-10-23T16:00:00.000Z",
    "type": "food",
    "description": "Monthly food distribution",
    "quantity": 2000,
    "supplies": ["Rice", "Beans"],
    "createdAt": "2025-10-01T10:00:00.000Z"
  }
]
```

### 4. Volunteer: Aggregated Stats
- **Endpoint:** GET /api/volunteers/:id/stats
- **Description:** Returns volunteer stats: total scans, events completed, people helped, total hours, volunteer score, and average rating.
- **Example Response:**
```json
{
  "volunteerId": "6521...",
  "totalScans": 18,
  "eventsCompleted": 4,
  "peopleHelped": 16,
  "totalHours": 12.5,
  "volunteerScore": 22.3,
  "avgRating": 4.7
}
```

### 5. Volunteer: Activity & Rating (previously implemented)
- **GET /api/volunteers/:id/activity** — Returns activeness metrics (logs, last activity, assigned events, activenessScore).
- **GET /api/volunteers/:id/rating** — Returns average rating and ratings list.

---

## General Notes
- All endpoints require JWT authentication (Authorization: Bearer <token>).
- All IDs are MongoDB ObjectIds (24-char hex strings).
- All dates/times are ISO 8601 strings (UTC).
- All new endpoints are available and return data in frontend-friendly shapes (see above examples).
- AidLog now records the volunteer who performed the scan (field: `volunteer`).
- Volunteers can now be associated with an NGO (field: `ngo` on User).

---

## Next Steps for Frontend
- Replace any mocked volunteer stats, scans, or event lists with real API calls to the above endpoints.
- Use the PATCH /api/volunteers/:id/ngo endpoint to let volunteers select their NGO.
- Use the GET /api/volunteers/:id/events endpoint to show daily/upcoming/completed events.
- Use the GET /api/volunteers/:id/scans endpoint to show all scans performed by a volunteer.
- Use the GET /api/volunteers/:id/stats endpoint to show the volunteer dashboard stats.

---

This file will be updated with every backend change relevant to frontend integration.

---

## [2025-10-23] Beneficiary Features

### 1. Aid History (this month or all time)
- **Endpoint:** GET /api/beneficiaries/:id/aid-history?month=YYYY-MM
- **Description:** Returns all aid (scans) received by the beneficiary, optionally filtered by month.
- **Example Response:**
```json
[
  {
    "id": "6531...",
    "event": { "id": "6512...", "name": "Food Drive", "location": "Kakuma" },
    "status": "collected",
    "timestamp": "2025-10-23T10:00:00.000Z",
    "hederaTx": { "transactionId": "0.0.123@163", "status": "SUCCESS" }
  }
]
```

### 2. Display QR Code
- **Endpoint:** GET /api/beneficiaries/:id/qr
- **Description:** Returns the beneficiary's DID and QR code URL.
- **Example Response:**
```json
{ "did": "did:example:abc123", "qrCodeUrl": "https://.../qr.png" }
```

### 3. Summary (last distribution, upcoming events, registration status, schedule, stats)
- **Endpoint:** GET /api/beneficiaries/:id/summary
- **Description:** Returns last distribution, upcoming events, registration status, next schedule, and total aids received.
- **Example Response:**
```json
{
  "lastDistribution": {
    "event": { "id": "6512...", "name": "Food Drive" },
    "timestamp": "2025-10-20T10:00:00.000Z"
  },
  "upcomingEvents": [
    { "id": "6512...", "name": "Medical Camp", "startTime": "2025-10-25T09:00:00.000Z", "location": "Kakuma" }
  ],
  "registrationStatus": true,
  "upcomingSchedule": { "id": "6512...", "name": "Medical Camp", "startTime": "2025-10-25T09:00:00.000Z" },
  "totalAids": 8
}
```

### 4. Upcoming Distributions
- **Endpoint:** GET /api/beneficiaries/:id/upcoming-distributions
- **Description:** Returns a list of upcoming events/distributions for the beneficiary.
- **Example Response:**
```json
[
  { "id": "6512...", "name": "Medical Camp", "location": "Kakuma", "startTime": "2025-10-25T09:00:00.000Z", "endTime": "2025-10-25T16:00:00.000Z" }
]
```

---

## Beneficiary Integration Notes
- All endpoints require JWT authentication (Authorization: Bearer <token>).
- All IDs are MongoDB ObjectIds (24-char hex strings).
- All dates/times are ISO 8601 strings (UTC).
- Use the aid-history endpoint with or without the `month` query param for monthly or full history.
- Use the summary endpoint to show last distribution, upcoming events, registration status, and aid stats in one call.
- Use the QR endpoint to display the beneficiary's QR code and DID.
- Use the upcoming-distributions endpoint to show the next available distributions for the beneficiary.
